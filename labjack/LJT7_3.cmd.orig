#drvAsynIPPortConfigure("$(SYSPORT)_LJT7_3", "192.168.100.63:502")
drvAsynIPPortConfigure("$(SYSPORT)_LJT7_3", "192.168.100.61:502")

#######################################################################
# modbusInterposeConfig(const char *portName,
#                      modbusLinkType linkType, .... Modbus link layer type: 0 = TCP/IP , 1 = RTU, 2 = ASCII
#                      int timeoutMsec, 
#                      int writeDelayMsec)
modbusInterposeConfig("$(SYSPORT)_LJT7_3", 0, 1000, 0)

# Enable ASYN_TRACEIO_HEX on octet server
#asynSetTraceIOMask("$(SYSPORT)_LJT7_3",0,4)
# Enable ASYN_TRACE_ERROR and ASYN_TRACEIO_DRIVER on octet server
#asynSetTraceMask("$(SYSPORT)_LJT7_3",0,9)

#######################################################################
# modbus port driver is created with the following command:
#drvModbusAsynConfigure(portName, 
#                        tcpPortName,
#                        slaveAddress, 
#                        modbusFunction, 
#                        modbusStartAddress, 
#                        modbusLength,
#                        dataType,
#                        pollMsec, 
#                        plcType);
#######################################################################

##Modbus functions
#Function name                          Function code
#Read Discrete Inputs                    2
#Read Coils                              1
#Write Single Coil                       5
#Write Multiple Coils                   15
#Read Input Registers                    4
#Read Holding Registers                  3
#Write Single Register                   6
#Write Multiple Registers               16
#Read/Write Multiple Registers          23
#Mask Write Register                    22
#Read FIFO Queue                        24
#Read File Record                       20
#Write File Record                      21
#Read Exception Status                   7
#Diagnostic                              8
#Get Com Event Counter                  11
#Get Com Event Log                      12
#Report Slave ID                        17
#Read Device Identification             43
#Encapsulated Interface Transport       43
#
#######################################################################

#######################################################################
#Supported Modbus data types
#modbusDataType value	drvUser field	Description
#0	UINT16	Unsigned 16-bit binary integers
#1	INT16SM	16-bit binary integers, sign and magnitude format. In this format bit 15 is the sign bit, and bits 0-14 are the absolute value of the magnitude of the number. 
#2	BCD_UNSIGNED	Binary coded decimal (BCD), unsigned. This data type is for a 16-bit number consisting of 4 4-bit nibbles, each of which encodes a decimal number from 0-9. 
#			A BCD number can thus store numbers from 0 to 9999. Many PLCs store some numbers in BCD format.
#3	BCD_SIGNED	4-digit binary coded decimal (BCD), signed. This data type is for a 16-bit number consisting of 3 4-bit nibbles, and one 3-bit nibble.
 
#			Bit 15 is a sign bit. Signed BCD numbers can hold values from -7999 to +7999. This is one of the formats used by Koyo PLCs for numbers such as ADC conversions.
#4	INT16		16-bit signed (2's complement) integers. This data type extends the sign bit when converting to epicsInt32.
#5	INT32_LE	32-bit integers, little endian (least significant word at Modbus address N, most significant word at Modbus address N+1)
#6	INT32_BE	32-bit integers, big endian (most significant word at Modbus address N, least significant word at Modbus address N+1)
#7	FLOAT32_LE	32-bit floating point, little endian (least significant word at Modbus address N, most significant word at Modbus address N+1)
#8	FLOAT32_BE	32-bit floating point, big endian (most significant word at Modbus address N, least significant word at Modbus address N+1)
#9	FLOAT64_LE	64-bit floating point, little endian (least significant word at Modbus address N, most significant word at Modbus address N+3)
#10	FLOAT64_BE	64-bit floating point, big endian (most significant word at Modbus address N, least significant word at Modbus address N+3)
#######################################################################

# Word access at Modbus address 0
# Access 1 words as inputs.  
# Modbus standard functions 3 (Read Multiple), 4 (Read One), 6 (Write One), and 16 (Write Multiple).
# Default data type unsigned integer.

# Read 8 binary input in a single register DIO0 - DIO7(FIO bank)
# Function 3 (Read Holding Registers), start address 2500, 
# Length 1, data_type = UINT16 = 0, 
# pollMsec = for read func, waits XXX msecs
drvModbusAsynConfigure("LJT7_3_DIO_In", "$(SYSPORT)_LJT7_3", 1, 3, 2500, 1, 0, 100, "LJT7_module")

#drvModbusAsynConfigure("LJ_T7_3_FIO_Dir_In_Word", "$(SYSPORT)_LJT7_3", 1, 3, 2600, 1, 0, 100, "LJT7_module")

# Access 1 words as outputs.  
# Either function code=6 (single register) or 16 (multiple registers) can be used, 
# but 16 is better because it is "atomic" when writing values longer than 16-bits.
# Default data type unsigned integer.
# Set a digital output one register at a time.  
# DIO0 - DIO7 (FIO), DIO8 - DIO15 (EIO), DIO16 - DIO19 (CIO), DIO20 - DIO22 (MIO bank)
#
# Set digital ouputs one bit at a time (FIO, CIO, EIO, MIO)
# DI00 - DI07 (FIO bank)
drvModbusAsynConfigure("LJT7_3_DIO_Out", "$(SYSPORT)_LJT7_3", 0, 6, 2000, 8, 0, 1, "LJT7_module")

# Read 14(actually 8)analog inputs, AIN0 -AIN6, AIN13
# Function 3 (Read Holding Registers), start address 0, 
# Length 28, data_type = FLOAT32_BE, 
# pollMsec = for read func, waits XXX msecs
drvModbusAsynConfigure("LJT7_3_AIN_In", "$(SYSPORT)_LJT7_3", 1, 3, 0, 28, 8, 100, "LJT7_module")

# Write analog outputs
# Update voltage output on a connected LJTIck-DAC accessory
# TDAC#, TDAC8 - TDAC15 (EIO 0-7),TDAC16 - TDAC 19(CIO 0-3)
# Function 16 (Write Multiple Registers), start address 30016, 
# Length 14, data_type = FLOAT32_BE, 
# pollMsec = for read func, waits XXX msecs
drvModbusAsynConfigure("LJT7_3_TDAC_OUt", "$(SYSPORT)_LJT7_3", 1, 16, 30016, 14, 8, 100, "LJT7_module")


dbLoadRecords("db/depo-ljt7-3.db","Sys=Depo, Dev={LJ:3}")
